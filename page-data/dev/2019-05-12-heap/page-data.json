{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/2019-05-12-heap/","result":{"data":{"site":{"siteMetadata":{"title":"Heeye Blog","author":"heeye","siteUrl":"https://heeyeah.github.io","comment":{"disqusShortName":"","utterances":"heeyeah/heeyeah.github.io"},"sponsor":{"buyMeACoffeeId":"heeyeah"}}},"markdownRemark":{"id":"1f2ca37a-b1e2-526a-968a-590f2e460b33","excerpt":"힙? 힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다. A가 B의 부모노드(parent node) 이면, A의 키(key)값과 B…","html":"<h4 id=\"힙\" style=\"position:relative;\"><a href=\"#%ED%9E%99\" aria-label=\"힙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙?</h4>\n<p>힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다.</p>\n<ul>\n<li>A가 B의 부모노드(parent node) 이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다.</li>\n<li>힙에는 두가지 종류가 있으며, 부모노드의 키값이 자식노드의 키값보다 항상 큰 힙을 ‘최대 힙’, 부모노드의 키값이 자식노드의 키값보다 항상 작은 힙을 ‘최소 힙’이라고 부른다.</li>\n<li>키값의 대소관계는 오로지 부모노드와 자식노드 간에만 성립하며, 특히 형제 사이에는 대소관계가 정해지지 않는다.</li>\n<li>각 노드의 자식노드의 최대개수는 힙의 종류에 따라 다르지만, 대부분의 경우는 자식노드의 개수가 최대 2개인 이진 힙(binary heap)을 사용한다.</li>\n<li>힙에서는 가장 높은(혹은 가장 낮은) 우선순위를 가지는 노드가 항상 뿌리노드에 오게 되는 특징이 있으며, 이를 응용하면 우선순위 큐와 같은 추상적 자료형을 구현할 수 있다.</li>\n<li>\n<p>최대 힙</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">algorithm <span class=\"token function\">upHeap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Position</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>not <span class=\"token function\">isRoot</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> and <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token function\">swapItems</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n v<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>최소 힙</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">algorithm <span class=\"token function\">downHeap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Position</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">while</span> not <span class=\"token punctuation\">(</span><span class=\"token function\">isExternal</span><span class=\"token punctuation\">(</span><span class=\"token function\">leftChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> and <span class=\"token function\">isExternal</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">isExternal</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> then v<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token function\">leftChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">leftChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  then v<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token function\">leftChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> v<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token function\">rightChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">key</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> then <span class=\"token function\">swapItems</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>힙정렬\n정렬 중에 selection, bubble, insertion sort는 기본으로 구현할 줄 알아야 하고, quick sort와 heap sort까지는 해봐야한다고 해서! :) 근데 어렵당. 어려워요 어려웡 <a href=\"https://github.com/heeyeah/AlgorithmPractice/blob/master/HeeyeahNote/src/note/HeapSort.java\">힙정렬 구현</a></li>\n</ul>\n<h4 id=\"우선순위-큐\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90\" aria-label=\"우선순위 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 큐?</h4>\n<p>알고리즘을 풀 때, 최댓값/최솟값을 구하는 문제는 heap을 사용하면 좋다고 한다.</p>\n<p>heap을 배열이나 링크드리스트로 구현해서 풀어도 참 좋겠지만, java의 PriorityQueue API를 써도 참 좋다☺️</p>\n<p>사실 힙문제를 배열로 구현해서 푸는 중에, 최소값 2개를 제거하고 값을 삽입 후 정렬을 하는데 정렬된 원소들을 앞으로 당기지 않으면 root 인덱스가 왔다갔다해서 반복수행하기가 힘들었다.</p>\n<p><strong>우선순위 큐는 힙을 베이스로 하는 자료구조</strong> 라는 것을 보고, 우선순위 큐에 대해 간단히 정리할 예정이다.</p>\n<p>난 자바를 사용하니, java.util에 있는 PriorityQueue에 대한 설명을 가져온다.</p>\n<p>An unbounded priority queue based on a priority heap. The elements of the priority queue are ordered according to their natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. A priority queue does not permit null elements.\n…(중략)…\nNote that this implementation is not synchronized. Multiple threads should not access a PriorityQueueinstance concurrently if any of the threads modifies the queue. Instead, use the thread-safe PriorityBlockingQueue class.</p>\n<p>[출처] <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\">https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html</a></p>\n<p>간단히 요약하자면</p>\n<ul>\n<li>우선순위 큐는 우선순위 힙을 베이스에 둠</li>\n<li>각 원소는 일반적인 ordering rule이나 큐 생성 시점에 Comparator의 구현을 따름\nnull element를 허용하지 않음</li>\n<li>일반적인 ordering rule을 따르기 때문에 비교할 수 없는 객체를 삽입하면 ClassCastException 던짐</li>\n<li>thread safe하지 않으니, multiple threads 환경에서는 PriorityBlockingQueue를 사용하라는 notice</li>\n</ul>\n<p>이 외에도 내용이 많지만, 자세한건 출처를 참고하자.\n결국 힙으로 만든 거니까, 힙을 사용할 수 있는 알고리즘 문제에서 이 PriorityQueue를 사용해서 풀면 좀 더 간단히 답을 도출할 수 있을 것 같다😍</p>","frontmatter":{"title":"[자료구조] 힙과 우선순위큐에 대하여","date":"May 12, 2019"}}},"pageContext":{"slug":"/dev/2019-05-12-heap/","previous":{"fields":{"slug":"/seminar/2019-04-27-spring-camp-2019-session2/"},"frontmatter":{"title":"[Spring Camp 2019] Monitoring with Actuator","category":"seminar","draft":false}},"next":{"fields":{"slug":"/algorithm/2019-05-28-dfs-bfs/"},"frontmatter":{"title":"DFS, BFS 구현","category":"algorithm","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}