{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-01-17-docker-get-started-2/","result":{"data":{"site":{"siteMetadata":{"title":"Heeye Blog","author":"heeye","siteUrl":"https://heeyeah.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"15a24a3b-f78d-5cbd-af3f-350b3274b7f4","excerpt":"Docker 방식으로 app을 build하려면, 제일 밑부터 쌓아야 하는데 그게 Container이다. Container > Service > Stack 순으로 밑부터 쌓여 올라간다라고 생각하면 될 것 같다. Your new development environment 기존에 개발 환경에서 Python 앱을 실행시키고 싶다 하면 먼저 파이썬 런타임을 설치해야한다. 환경구성도 맞춰야하고 OS…","html":"<p>Docker 방식으로 app을 build하려면, 제일 밑부터 쌓아야 하는데 그게 Container이다. Container > Service > Stack 순으로 밑부터 쌓여 올라간다라고 생각하면 될 것 같다.</p>\n<h3 id=\"your-new-development-environment\" style=\"position:relative;\"><a href=\"#your-new-development-environment\" aria-label=\"your new development environment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Your new development environment</h3>\n<p>기존에 개발 환경에서 Python 앱을 실행시키고 싶다 하면 먼저 파이썬 런타임을 설치해야한다. 환경구성도 맞춰야하고 OS가 뭔지에 따라 필요한 것도 다 달라서 맞춰줘야 하는 것이지. 하지만 도커는 뭐 설치할 필요없이 파이썬런타임 이미지만 가지고 있으면 된다. 이미지로 build를 하면 거기에 종속성, 런타임, 코드 등 다 갖춰져 있는 것이다. 이런 portable images를 정의하는 데가 Dockerfile이다.</p>\n<h3 id=\"define-a-container-with-dockerfile\" style=\"position:relative;\"><a href=\"#define-a-container-with-dockerfile\" aria-label=\"define a container with dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Define a Container with Dockerfile</h3>\n<p>Dockerfile은 내 컨테이너에서 뭔 일이 일어나는 지를 정의하는 파일이다. docker 환경 안에서 리소스에 접근하는 건 가상화되고, 내 시스템의 나머지와 독립된다. 그냥 할 일은 outside world에 port를 맵핑하는 일과 환경으로 copy in 할 파일을 명확히 하는 것이다. 이렇게 하면 Dockerfile에 정의된 build 정보로 어디서든 실행시킬 수 있다.</p>\n<p>Dockerfile, app.py, requirements.txt 3가지 파일을 생성한 뒤</p>\n<ul>\n<li>create docker image <code class=\"language-text\">docker build --tag=friendlyhello</code></li>\n<li>list docker images <code class=\"language-text\">docker image ls</code></li>\n<li>friendlyhello image 실행. 파이썬이 <code class=\"language-text\">http://0.0.0.:80</code> 에서 app을 serving한다. 이 메시지는 컨테이너 내부에서 나온 메시지이고 컨테이너의 80포트랑 4000이 맵핑됐는 지 난 알 수 없지만, 정확한 URL은 localhost:4000 이다. (toolbox는 localhost대신에 docker machine IP를 사용해야 한다. <a href=\"http://192.168.99.100:4000/\">http://192.168.99.100:4000/</a> 과 같이. IP 주소 찾으려면 docker-machine ip )\n<code class=\"language-text\">docker run -p 4000:80 friendlyhello</code></li>\n<li>Ctrl + C 만으로 종료가 안되니, <code class=\"language-text\">docker container ls</code> 에서 목록보고 <code class=\"language-text\">docker Container stop &lt;Container NAME or ID&gt;</code> 해야 함</li>\n<li>run backgroud mode <code class=\"language-text\">docker run -d -p 4000:80 friendlyhello</code></li>\n</ul>\n<h3 id=\"share-your-image\" style=\"position:relative;\"><a href=\"#share-your-image\" aria-label=\"share your image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share your image</h3>\n<p>registry는 repository의 집합이고, repository는 image들의 집합이다-github repo랑 비슷한데 여긴 코드가 이미 다 built 돼 있는 상태.</p>\n<h3 id=\"log-in-with-your-docker-id\" style=\"position:relative;\"><a href=\"#log-in-with-your-docker-id\" aria-label=\"log in with your docker id permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log in with your Docker ID</h3>\n<p>hub.docker.com 에서 id, pw 만들어서 접속</p>\n<h3 id=\"tag-the-image\" style=\"position:relative;\"><a href=\"#tag-the-image\" aria-label=\"tag the image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tag the image</h3>\n<p>이미지에 태그 따자.\nrepo에 올리는 이미지는 <code class=\"language-text\">username/repository:tag</code> 를 사용하면 좋다. 태그는 옵션이긴 한데 추천하고, 버전관리 이런거에도 좋다. repository와 tag는 의미있느 이름으로 한다. 예를 들면 <code class=\"language-text\">get-started:part2</code> = <code class=\"language-text\">get-started</code> repository에 <code class=\"language-text\">part2</code> 태그로 image를 put한단 의미이다. <code class=\"language-text\">docker tag friendlyhello dockerhee/get-started:part2</code> 이 명령어는 <code class=\"language-text\">docker tag image username/repository:tag</code> 이거 그대로 사용.</p>\n<h3 id=\"publish-the-image\" style=\"position:relative;\"><a href=\"#publish-the-image\" aria-label=\"publish the image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publish the image</h3>\n<p><code class=\"language-text\">docker push dockerhee/get-started:part2</code>\n<img src=\"https://heeyeah.github.io/imgs/docker_push_image.PNG\" alt=\"push_image\"></p>","frontmatter":{"title":"[Docker] Docker Get Started 따라하기 - 2","date":"January 18, 2019"}}},"pageContext":{"slug":"/2019-01-17-docker-get-started-2/","previous":{"fields":{"slug":"/java/call-by-value-ref/"},"frontmatter":{"title":"Pass by value, Pass by reference에 대해","category":"java","draft":false}},"next":{"fields":{"slug":"/2019-01-17-docker-get-started-3/"},"frontmatter":{"title":"[Docker] Docker Get Started 따라하기 - 3","category":"Docker","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}