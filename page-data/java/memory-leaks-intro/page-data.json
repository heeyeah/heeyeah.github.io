{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/memory-leaks-intro/","result":{"data":{"site":{"siteMetadata":{"title":"Heeye Blog","author":"heeye","siteUrl":"https://heeyeah.github.io","comment":{"disqusShortName":"","utterances":"heeyeah/heeyeah.github.io"},"sponsor":{"buyMeACoffeeId":"heeyeah"}}},"markdownRemark":{"id":"f0053860-904e-59ab-9d4c-3ccb04df651c","excerpt":"memory leak 코드만 보고 memory leak 현상의 원인을 파악하는 것은 모래밭에서 바늘찾기와 같다는 말을 본 적이 있다.\n다양한 원인에 의해 발생하기도 하고, 단순히 메모리릭이라고 해서 하나의 이유가 아니니 그만큼 원인을 파악하기 어렵다는 말이다. 일단 memory leak인가보다 라고 인지하려면, 가 계속 발생하지만 에는 변화가 없는 경우 memory leak…","html":"<h2 id=\"memory-leak\" style=\"position:relative;\"><a href=\"#memory-leak\" aria-label=\"memory leak permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>memory leak</h2>\n<p>코드만 보고 memory leak 현상의 원인을 파악하는 것은 모래밭에서 바늘찾기와 같다는 말을 본 적이 있다.\n다양한 원인에 의해 발생하기도 하고, 단순히 <strong>메모리릭</strong>이라고 해서 하나의 이유가 아니니 그만큼 원인을 파악하기 어렵다는 말이다.</p>\n<p>일단 memory leak인가보다 라고 인지하려면, <code class=\"language-text\">FullGC</code>가 계속 발생하지만 <code class=\"language-text\">heap memory</code>에는 변화가 없는 경우 memory leak이 발생한다고 인지할 수 있다. 이럴 땐 <code class=\"language-text\">heap dump</code>를 떠서 분석이 필요하다.</p>\n<p>그럼 여기서 기본적으로 알고 있어야 할 게 <code class=\"language-text\">FullGC</code>, <code class=\"language-text\">heap memory</code>, <code class=\"language-text\">heap dump</code> 등이 뭔지를 알아야 하는데, 이것을 이해하려면 JVM 구조에 대한 이해가 필요하다.</p>\n<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index</h2>\n<p>memory leak을 잡으려면 JVM을 알아야하고,\nJVM 위에서 동작하는 어플리케이션의 동작방식도 알아야하고,\n어플리케이션의 동작방식은 결국 내가 개발한 코드에 의해서 좌우되니,</p>\n<p>내가 개발한 코드가 어떻게 어플리케이션을 동작시키고 이게 JVM에서 어떻게 메모리를 사용해서 동작하는지까지 알아야 메모리 누수를 잡든, garbage collection 튜닝을 하든 이런 게 가능하다.</p>\n<p>그래서 정리해야 할 개념들이 꽤 많지만,\n기본적인 키워드 정리만하기로 하고 자세한 건 상황에 따라 나타나는 현상에 따라 그때그때 파악하는 게 좋다고 생각한다.</p>\n<h3 id=\"정리할-목록\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%A0-%EB%AA%A9%EB%A1%9D\" aria-label=\"정리할 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리할 목록</h3>\n<ol>\n<li>JVM memory 구조 (1.8)</li>\n<li>JVM monitoring &#x26; Garbage collection 튜닝</li>\n</ol>\n<p>정리할 것들을 쓰고 나서 JVM 튜닝할 것을 보니, 결국 JVM 모니터링이 우선이 돼야 옵션을 바꿔서 부하테스트를 하든 뭐든 다 가능하다.\n개발 환경에 JVM을 모니터링할 수 있는 환경부터 만들어 놓고, 왜 OOM이 나는지 튜닝을 어떻게 하면 좋을지 지금 어플리케이션은 잘 돌아가고 있는지를 판단해야 할 것 같다.\n(그리고 Garbage collection 튜닝은, 이 모든 것의 마지막에 하는 것이라고 한다!)</p>\n<hr>\n<p>💡참고자료</p>\n<ul>\n<li><a href=\"https://woowabros.github.io/tools/2019/05/24/jvm_memory_leak.html\">https://woowabros.github.io/tools/2019/05/24/jvm_memory_leak.html</a></li>\n</ul>","frontmatter":{"title":"memory leak. 서론 - 왜 이걸 정리하는지?","date":"December 28, 2020"}}},"pageContext":{"slug":"/java/memory-leaks-intro/","previous":{"fields":{"slug":"/spring/using-webflux-1/"},"frontmatter":{"title":"using webflux 1. 개발환경 셋팅 (라이브러리 등)","category":"spring","draft":false}},"next":{"fields":{"slug":"/diary/blahblah/"},"frontmatter":{"title":"blah, blah","category":"diary","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}