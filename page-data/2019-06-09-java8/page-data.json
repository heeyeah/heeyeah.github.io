{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-06-09-java8/","result":{"data":{"site":{"siteMetadata":{"title":"Heeye Blog","author":"heeye","siteUrl":"https://heeyeah.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"da954220-ea52-5cf9-8b2c-0875096ad6a1","excerpt":"Java8 특징 Java 8 provides following features for Java Programming: Lambda expressions * Method references * Functional interfaces * Stream API * Default methods * Static methods in interface * Optional class * Collectors class * ForEach() method * Parallel array sorting * Type and…","html":"<h2 id=\"java8-특징\" style=\"position:relative;\"><a href=\"#java8-%ED%8A%B9%EC%A7%95\" aria-label=\"java8 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java8 특징</h2>\n<p>Java 8 provides following features for Java Programming:</p>\n<ul>\n<li>Lambda expressions *</li>\n<li>Method references *</li>\n<li>Functional interfaces *</li>\n<li>Stream API *</li>\n<li>Default methods *</li>\n<li>Static methods in interface *</li>\n<li>Optional class *</li>\n<li>Collectors class *</li>\n<li>ForEach() method *</li>\n<li>Parallel array sorting *</li>\n<li>Type and Repating Annotations</li>\n<li>Nashorn JavaScript Engine</li>\n<li>Base64 Encode Decode</li>\n<li>IO Enhancements</li>\n<li>Concurrency Enhancements</li>\n<li>JDBC Enhancements etc.</li>\n</ul>\n<p>간단하게 정리하고자 한다.</p>\n<h3 id=\"lambda-expressions\" style=\"position:relative;\"><a href=\"#lambda-expressions\" aria-label=\"lambda expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda Expressions</h3>\n<p>람다식은 함수적인 표현을 쓸 수 있게 도와주는 형식이다. 간결하게 표현가능하며, anonymous function이라고도 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">hee</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaExpressions</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">int</span> width<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//with lambda</span>\n        <span class=\"token class-name\">Drawable</span> d2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Drawing \"</span><span class=\"token operator\">+</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        d2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>  <span class=\"token comment\">//It is optional</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Drawable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Lambda expression helps us to write our code in functional style. It provides a clear and concise way to implement SAM interface(Single Abstract Method) by using an expression. It is very useful in collection library in which it helps to iterate, filter and extract data.</p>\n</blockquote>\n<h3 id=\"method-references\" style=\"position:relative;\"><a href=\"#method-references\" aria-label=\"method references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method References</h3>\n<p>메소드 레퍼런스는\nReference to a static method.\nReference to an instance method.\nReference to a constructor.</p>\n<p>3개의 경우에 대해 사용할 수 있다. 메소드 레퍼런스는 이미 우리가 구현하고자 하는 람다식 자체가 구현되어있는 경우가 있는데 이럴때 사용하는 메서드 참조용 특수 문법을 <strong>메소드 참조</strong> 라고 표현한다.</p>\n<p>자주쓰는 표현에서는 아래와 같은 게 메소드 레퍼런스이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Component::getValue - instance method 레퍼런스 사용</span>\ncomponents<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span><span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Java 8 Method reference is used to refer method of functional interface . It is compact and easy form of lambda expression. Each time when you are using lambda expression to just referring a method, you can replace your lambda expression with method reference.</p>\n</blockquote>\n<h3 id=\"functional-interface\" style=\"position:relative;\"><a href=\"#functional-interface\" aria-label=\"functional interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Interface</h3>\n<p>함수형 인터페이스는 <code class=\"language-text\">@FunctionalInterface</code> 를 붙이길 권장한다. 여러 개의 abstract, default 메소드가 있는 건 상관없으나 abstract method는 하나여야 한다.</p>\n<blockquote>\n<p>An Interface that contains only one abstract method is known as functional interface. It can have any number of default and static methods. It can also declare methods of object class.\nFunctional interfaces are also known as Single Abstract Method Interfaces (SAM Interfaces).</p>\n</blockquote>\n<p>자주 사용하는 것 중에 function interface가 <code class=\"language-text\">Comparator</code> 인터페이스가 있다. Comparator을 까보면(?) compare 만 abstract method고 다른 메소드들은 default나 static이다. equal 도 abstract인데 Object class method들은 상관없다고 한다😜</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// It can contain any number of Object class methods.  </span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"default-methods\" style=\"position:relative;\"><a href=\"#default-methods\" aria-label=\"default methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Methods</h4>\n<p>java8이 들어오면서 인터페이스에 변화가 생긴 것 중에 하나이다. default 메소드를 사용해서 구현체를 인터페이스에 만들 수 있다는 사실!\ndefault와 static 메소드를 통해 인터페이스에도 구현체를 만들 수 있게 됨으로써 인터페이스를 활용하기 용이해졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FInterface</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printAbstractMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>❗️java8에서 인터페이스와 추상클래스의 차이?</p>\n<ul>\n<li>추상클래스와 인터페이스는 인스턴스화 하는 것은 불가능하며, 구현부가 있는 메소드와 없는 메소드 모두 가질 수 있다는 점에서 유사하다.</li>\n<li>인터페이스에서 모든 변수는 기본적으로 public static final 이며, 모든 메소드는 public abstract 인 반면 추상클래스에서는 static 이나 final 이 아닌 필드를 지정할 수 있고, public, protected, private 메소드를 가질 수 있다.</li>\n<li>인터페이스를 구현하는 어떤 클래스는, 다른 여러개의 인터페이스들을 함께 구현할 수 있다. 추상클래스는 상속을 통해 구현되는데, 자바에서는 다중상속을 지원하지 않으므로 추상클래스를 상속받은 서브클래스는 다른 클래스를 상속받을 수 없다.</li>\n</ul>\n<p><a href=\"https://yaboong.github.io/java/2018/09/25/interface-vs-abstract-in-java8/\">출처</a></p>\n<blockquote>\n<p>Java provides a facility to create default methods inside the interface. Methods which are defined inside the interface and tagged with default keyword are known as default methods. These methods are non-abstract methods and can have method body.</p>\n</blockquote>\n<h3 id=\"datetime-api\" style=\"position:relative;\"><a href=\"#datetime-api\" aria-label=\"datetime api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date/Time API</h3>\n<p>java8 이전에 Date api가 문제점이 많다고 들었다. immutable 해야하는데 수정할 수 있고 막… 그랬어서 이번에 java8에서 많이 개편됐다고 들음!\nLocalDate, LocalTime과 같은 api가 추가된 것 같은데 잘 쓰는 중이다.</p>\n<blockquote>\n<p>Java has introduced a new Date and Time API since Java 8. The java.time package contains Java 8 Date and Time classes.</p>\n</blockquote>\n<h3 id=\"stream-api\" style=\"position:relative;\"><a href=\"#stream-api\" aria-label=\"stream api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream API</h3>\n<p>Stream은 컬렉션, 배열등의 저장 요소를 하나씩 참조하며 함수형 인터페이스(람다식)를 적용하며 반복적으로 처리할 수 있도록 해주는 기능이다.\n스트림은</p>\n<ul>\n<li>재사용할 수 없고</li>\n<li>지연처리(lazy invocation)되며</li>\n<li>\n<p>ParallelStream은 여러 스레드가 작업</p>\n<blockquote>\n<p>Java 8 java.util.stream package consists of classes, interfaces and an enum to allow functional-style operations on the elements. It performs lazy computation. So, it executes only when it requires.</p>\n</blockquote>\n</li>\n</ul>\n<p>❗️스트림은 일반적으로 collection과 비교가 되는 것 같다. 뭐가 다를까?</p>\n<p>A collection is an in-memory data structure, which holds all the values that the data structure currently has—every element in the collection has to be computed before it can be added to the collection. In contrast, a stream is a conceptually fixed data structure in which elements are computed on demand.</p>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#package.description\">java8 docs</a>\nStreams differ from collections in several ways:</p>\n<ul>\n<li>\n<p>No storage. 스트림은 요소를 저장하는 데이터 구조가 아니다. 소스에서 요소들을 <strong>나르는</strong> 것이라고 설명하고 있다.</p>\n<blockquote>\n<p>A stream is not a data structure that stores elements; instead, it conveys elements from a source such as a data structure, an array, a generator function, or an I/O channel, through a pipeline of computational operations.</p>\n</blockquote>\n</li>\n<li>\n<p>Functional in nature. 태생이 함수형이라는 것이다. 스트림의 오퍼레이션은 결과값을 생성하는 것이지 소스를 수정하는 데에 있지 않다.</p>\n<blockquote>\n<p>An operation on a stream produces a result, but does not modify its source. For example, filtering a Stream obtained from a collection produces a new Stream without the filtered elements, rather than removing elements from the source collection.</p>\n</blockquote>\n</li>\n<li>\n<p>Laziness-seeking. 지연처리된다. 스트림 오퍼레이션은 대부분 lazily하게 구현되어 있다. 최종연산을 할 때 중간연산이 같이 된다.</p>\n<blockquote>\n<p>Many stream operations, such as filtering, mapping, or duplicate removal, can be implemented lazily, exposing opportunities for optimization. For example, “find the first String with three consecutive vowels” need not examine all the input strings. Stream operations are divided into intermediate (Stream-producing) operations and terminal (value- or side-effect-producing) operations. Intermediate operations are always lazy.</p>\n</blockquote>\n</li>\n<li>\n<p>Possibly unbounded. 가능하면 거의 무한하다(?) 콜렉션은 제한된 사이즈를 가지지만 스트림은 그렇지 않다. short-circuiting 연산을 사용하면 무한한 자원에 대한 연산을 유한한 시간 내에 완료할 수 있다.</p>\n<blockquote>\n<p>While collections have a finite size, streams need not. Short-circuiting operations such as limit(n) or findFirst() can allow computations on infinite streams to complete in finite time.</p>\n</blockquote>\n</li>\n<li>\n<p>Consumable. 소모된다. 스트림의 한 사이클동안에 요소는 한번만 방문된다. 소스의 같은 요소에 접근하고 싶으면 새로운 스트림 생성이 필수이다.</p>\n<blockquote>\n<p>The elements of a stream are only visited once during the life of a stream. Like an Iterator, a new stream must be generated to revisit the same elements of the source.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"그-외\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-label=\"그 외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외</h3>\n<p>그 외에 더 많은 feature들이 많지만 내가 사용하는 정도의 범위에서 정리했다.</p>\n<h4 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h4>\n<ul>\n<li><a href=\"https://www.javatpoint.com/java-8-features\">https://www.javatpoint.com/java-8-features</a></li>\n</ul>","frontmatter":{"title":"Java8 특징 정리","date":"June 09, 2019"}}},"pageContext":{"slug":"/2019-06-09-java8/","previous":{"fields":{"slug":"/java/2019-06-06-jvm-monitoring/"},"frontmatter":{"title":"[JVM] Jmeter, VisualVM 모니터링 해보기","category":"java","draft":false}},"next":{"fields":{"slug":"/algorithm/2019-06-10-search-algorithms/"},"frontmatter":{"title":"Search Algorithm Basic","category":"algorithm","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}