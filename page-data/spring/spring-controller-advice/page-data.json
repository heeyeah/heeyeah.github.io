{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring/spring-controller-advice/","result":{"data":{"site":{"siteMetadata":{"title":"Heeye Blog","author":"heeye","siteUrl":"https://heeyeah.github.io","comment":{"disqusShortName":"","utterances":"heeyeah/heeyeah.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"058be235-ae90-534c-856b-387584275d00","excerpt":"ControllerAdvice Our goal is to not handle exceptions explicitly in Controller methods where possible. They are a cross-cutting concern better handled separately in dedicated code. \n출처-Exception Handling in Spring MVC Spring 3.2부터 제공하는 @ControllerAdvice…","html":"<h3 id=\"controlleradvice\" style=\"position:relative;\"><a href=\"#controlleradvice\" aria-label=\"controlleradvice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ControllerAdvice</h3>\n<p>Our goal is to not handle exceptions explicitly in Controller methods where possible. They are a cross-cutting concern better handled separately in dedicated code. <br/>\n<a href=\"https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc\">출처-Exception Handling in Spring MVC</a></p>\n<br/>\nSpring의 기본적인 개념(IoC, DI, AOP) 중에 하나인 AOP를 잘 이해할 수 있는 기능이라고 생각한다. todo-list-project를 단시간에 구현하면서, logging에 대한 것도 AOP 개념을 이해하고 사용하면 Controller마다 logging을 작성해야하는 수고로움을 덜수 있을 것이었다. ~~그건 추후에 고쳐나가기로 한다.💭~~\n<p>Spring 3.2부터 제공하는 @ControllerAdvice 는 클래스의 경로를 검색해서 오류를 캐치할 구현 클래스를 만들게 도와주는 것이다. 일반적으로 @Controller 류가 선언된 클래스들에서 발생한 예외를 감지하고 적절한 응답을 만들어 낼 때 사용한다.</p>\n<p><strong>간단하게 생각하면, 비즈니스 로직에서 Exception 던질 때 마다 메세지, 공통로직 처리 등 공통으로 해야할 부분을 @ControllerAdvice 가 달린 클래스에 정의해서 처리해준다고 생각하는 게 쉽다.</strong> Exception을 handling하는 방법에는 per Exception, per controller or globally 3가지가 존재한다. 내가 사용하고 구현했던 건 Globally한 방법이고 <strong>정말 간단하게</strong> 구헌했고 소스는 여기있다. <a href=\"https://github.com/heeyeah/todo-list-project\">github</a></p>\n<p>예외처리 케이스들을 모아놓은 클래스- ControllerAdvice 어노테이션이 붙어있다!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@ControllerAdvice\npublic class GlobalExceptionHandling {\n\n\tprivate Logger logger;\n\n\tpublic GlobalExceptionHandling() {\n\t\tlogger = LoggerFactory.getLogger(getClass());\n\t}\n\n\t@ExceptionHandler(value = { InternalServerException.class })\n\t@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n\t@ResponseBody\n\tpublic ResponseEntity&lt;?&gt; handleInternalServerException(Exception ex) {\n\t\tlogger.error(&quot; handleInternalServerException. {}&quot;, ex.getMessage());\n\t\treturn errorResponse(ex, HttpStatus.INTERNAL_SERVER_ERROR);\n\t}\n\n\n  ...(생략)...\n\n\tpublic ResponseEntity&lt;TodoResponseDto&gt; errorResponse(Throwable throwable, HttpStatus status) {\n\t\tTodoResponseDto res = new TodoResponseDto();\n\t\tres.setResponseCode(TodoResponse.FAIL);\n\t\tres.setResponseMessage(throwable.getMessage());\n\t\treturn new ResponseEntity&lt;TodoResponseDto&gt;(res, status);\n\t}\n}</code></pre></div>\n<p><em>InternalServerException 클래스는 Exception을 extend한 커스텀 클래스이다. (내가 만든)</em></p>\n<p>Service 단에서 <code class=\"language-text\">throw new InternalServerException(&quot;미완료인 태그가 존재합니다. =&gt; &quot; + incompleteTodoSet);</code> 이렇게 Exception을 던지면 해당 예외를 catch해서 처리한다. <code class=\"language-text\">@ResponseStatus</code>에 정의해둔 대로 500 error를 return할 것이며, <code class=\"language-text\">@ResponseBody</code>에 정의해놓은 대로 ResponseEntity에 status와 Exception을 발생시킬 때 입력한 message인 <code class=\"language-text\">미완료인 태그가 존재합니다. =&gt; [tagset]</code>을 함께 response로 반환해 줄 것이다.</p>\n<p>AOP의 개념을 누군가에게 설명해줄 만큼 명확하게 정리되어 있진 않지만, <code class=\"language-text\">@ControllerAdvice</code>를 사용하면서 어떤 개념인지 감을 잡아서 일단 그걸로 됐다,,❤️</p>\n<br/>\n<br/>\n<br/>\n<h3 id=\"spring의-기본개념\" style=\"position:relative;\"><a href=\"#spring%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%85%90\" aria-label=\"spring의 기본개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring의 기본개념</h3>\n<p><em>대략적인 Spring의 기본 개념을 정리하고 싶어 간단히 메모를 남긴다😌</em></p>\n<h4 id=\"ioc--inversion-of-control---제어의-역전\" style=\"position:relative;\"><a href=\"#ioc--inversion-of-control---%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84\" aria-label=\"ioc  inversion of control   제어의 역전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IoC : Inversion of Control - 제어의 역전</h4>\n<p>Spring 컨테이너를 보고 IoC 컨테이너라고 많이들 정의한다. 그럼 Spring 컨테이너가 뭔지 알면 IoC를 이해할 수 있지 않을까?</p>\n<p>컨테이너는 보통 인스턴스의 생명주기를 관리하며, 생성된 인스턴스들에게 추가적인 기능을 제공하도록하는 것이라 할 수 있다. 다시말해, 컨테이너란 당신이 작성한 코드의 처리과정을 위임받은 독립적인 존재라고 생각하면 된다. 컨테이너는 적절한 설정만 되어있다면 누구의 도움없이도 프로그래머가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤해준다. <a href=\"https://limmmee.tistory.com/13\">출처</a></p>\n<p>내가 이해하기로 Spring컨테이너는 Bean을 관리하는 컨테이너라고 생각하면 이해가 쉽다. 어떤 기능을 구현하고 싶어서 Bean으로 구현하고 어플리케이션을 구동시켰을 때, 컨테이너는 내가 구현한 Bean을 생성하고 소멸시키며 책임을 지는 아이이다. 빈 자체가 필요하기 전까지는 인스턴스화를 하지 않는다. <em>(lazy loading 설정을 다르게 할 수도 있지만)</em></p>\n<p>내가 구현한 Bean을 호출해서 사용하고 싶을 때, 어떻게 할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MyCustomBean customBean = ApplicationContext.getBean(MyCustomBean.class);</code></pre></div>\n<p>이런식으로 사용하는데, 여기서 <strong>의존성 주입</strong> 의 개념을 볼 수 있다. IoC와 DI는 따로 떨어진 개념보다는 연관이 된 개념이라고 생각하고 봐야 한다. 그럼 의존성 주입은 뭐지?</p>\n<h4 id=\"di--dependency-injection---의존성-주입\" style=\"position:relative;\"><a href=\"#di--dependency-injection---%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\" aria-label=\"di  dependency injection   의존성 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI : Dependency Injection - 의존성 주입</h4>\n<p>Dependency Injection은 Spring Framework에서 지원하는 IoC의 형태.\n<em>객체를 직접 생성하는 게 아니라 외부에서 객체를 주입시켜 사용하는 방식</em> 으로 이해해도 될 것 같기도 하다. 의존성을 주입해서 Bean을 만들 때, 각 Bean의 생성자가 팩토리 내부에 있는 게 아닌 getBean할 때 <strong>이거 생성해줘!</strong> 를 부탁해서 스프링 컨테이너가 생성된 인스턴스의 생명주기를 제어할 수 있게 해주는 것이 아닐까?</p>\n<p>DI도 IoC와 같이 Spring에서만 쓰는 개념이 아니다. 프로그래밍에서 구성요소간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일 등을 통해 정의되게 하는 디자인 패턴 중의 하나이다. <a href=\"https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EC%84%B1_%EC%A3%BC%EC%9E%85\">위키피디아 정의</a></p>\n<h4 id=\"aop--aspect-oriented-programming---관점-지향-프로그래밍\" style=\"position:relative;\"><a href=\"#aop--aspect-oriented-programming---%EA%B4%80%EC%A0%90-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"aop  aspect oriented programming   관점 지향 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP : Aspect Oriented Programming - 관점 지향 프로그래밍</h4>\n<p>AOP는 관점 지향 프로그래밍으로 “기능을 핵심 비즈니스 기능과 공통 기능으로 ‘구분’하고, 공통 기능을 개발자의 코드 밖에서 필요한 시점에 적용하는 프로그래밍 방법”이다.</p>\n<p>간단히라도 정리하니 기분이 좋당🤩🤩🤩</p>","frontmatter":{"title":"[Spring] @ControllerAdvice와 AOP","date":"March 24, 2019"}}},"pageContext":{"slug":"/spring/spring-controller-advice/","previous":{"fields":{"slug":"/algorithm/2019-02-08-backtracking-nqueen/"},"frontmatter":{"title":"N-Queen 알고리즘","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/dev/2019-04-18-dev-study-cert-principle/"},"frontmatter":{"title":"인증서는 어떻게 동작하는 것일까?","category":"dev","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}